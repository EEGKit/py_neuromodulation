
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_2_example_add_feature.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_2_example_add_feature.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_2_example_add_feature.py:


===================
Adding New Features 
===================

.. GENERATED FROM PYTHON SOURCE LINES 7-13

.. code-block:: Python


    import py_neuromodulation as nm
    from py_neuromodulation.nm_features import NMFeature
    import numpy as np
    from typing import Iterable








.. GENERATED FROM PYTHON SOURCE LINES 14-17

In this example we will demonstrate how a new feature can be added to the existing feature pipeline.
This can be done simply by adding an object of the inherited :class:`~nm_features_abc.Feature`
class to the stream `stream.run_analysis.features.features` list.

.. GENERATED FROM PYTHON SOURCE LINES 17-55

.. code-block:: Python


    data = np.random.random([1, 1000])

    stream = nm.Stream(
        sfreq=1000,
        data=data,
        sampling_rate_features_hz=10,
        verbose=False,
    )


    class NewFeature(NMFeature):
        def __init__(
            self, settings: dict, ch_names: Iterable[str], sfreq: float
        ) -> None:
            self.s = settings
            self.ch_names = ch_names

        def calc_feature(self, data: np.ndarray, features_compute: dict) -> dict:
            for ch_idx, ch in enumerate(self.ch_names):
                features_compute[f"new_feature_{ch}"] = np.mean(data[ch_idx, :])

            return features_compute

        def test_settings():
            pass


    newFeature = NewFeature(
        stream.settings, list(stream.nm_channels["name"]), stream.sfreq
    )
    stream.run_analysis.features.features.append(newFeature)

    features = stream.run_analysis.process(data)
    feature_name = f"new_feature_{stream.nm_channels['name'][0]}"

    print(f"{feature_name}: {features[feature_name]}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    new_feature_ch0: 0.494598734775915




.. GENERATED FROM PYTHON SOURCE LINES 56-77

This example shows a simple newly instantiated feature class called `NewFeature`.
The instantiated `newFeature` object could then be added to the existing feature list by calling
`stream.run_analysis.features.features.append(newFeature)`.

To permanently add a novel feature, the new feature class needs to be added to
the :class:`~nm_features` class. This can be done by inserting the feature_name in
in the :class:`~nm_features.Feature` init function:

.. code-block:: python

   for feature in s["features"]:
       if s["features"][feature] is False:
           continue
       match feature:
           case "new_feature":
               FeatureClass = nm_new_feature.NewFeature
           ...

The new feature class can then be used by setting the `settings["feature"]["new_feature"]` value in the
settings to true.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.037 seconds)


.. _sphx_glr_download_auto_examples_plot_2_example_add_feature.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_2_example_add_feature.ipynb <plot_2_example_add_feature.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_2_example_add_feature.py <plot_2_example_add_feature.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
